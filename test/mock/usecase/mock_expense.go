// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katsuharu/household-account-book/usecase (interfaces: ExpenseUseCase)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/katsuharu/household-account-book/usecase"
)

// MockExpenseUseCase is a mock of ExpenseUseCase interface.
type MockExpenseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseUseCaseMockRecorder
}

// MockExpenseUseCaseMockRecorder is the mock recorder for MockExpenseUseCase.
type MockExpenseUseCaseMockRecorder struct {
	mock *MockExpenseUseCase
}

// NewMockExpenseUseCase creates a new mock instance.
func NewMockExpenseUseCase(ctrl *gomock.Controller) *MockExpenseUseCase {
	mock := &MockExpenseUseCase{ctrl: ctrl}
	mock.recorder = &MockExpenseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseUseCase) EXPECT() *MockExpenseUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseUseCase) Create(arg0 context.Context, arg1 string) (*usecase.ExpenseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*usecase.ExpenseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExpenseUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseUseCase)(nil).Create), arg0, arg1)
}
