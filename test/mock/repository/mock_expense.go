// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katsuharu/household-account-book/domain/repository (interfaces: Expense)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	expense "github.com/katsuharu/household-account-book/domain/object/expense"
)

// MockExpense is a mock of Expense interface.
type MockExpense struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseMockRecorder
}

// MockExpenseMockRecorder is the mock recorder for MockExpense.
type MockExpenseMockRecorder struct {
	mock *MockExpense
}

// NewMockExpense creates a new mock instance.
func NewMockExpense(ctrl *gomock.Controller) *MockExpense {
	mock := &MockExpense{ctrl: ctrl}
	mock.recorder = &MockExpenseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpense) EXPECT() *MockExpenseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpense) Create(arg0 context.Context, arg1 *expense.Expense) (*expense.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*expense.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExpenseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpense)(nil).Create), arg0, arg1)
}
